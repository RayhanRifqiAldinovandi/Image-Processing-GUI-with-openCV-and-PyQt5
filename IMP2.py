# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'IMP2.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtGui import QPixmap,QImage
from PyQt5.QtWidgets import QApplication,QMainWindow,QFileDialog,QPushButton,QLabel,QAction
from PIL import ImageTk, Image, ImageEnhance, ImageFilter
import  numpy as np
from PyQt5 import QtCore, QtGui, QtWidgets,uic
import cv2, imutils
import sys


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(617, 502)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setStyleSheet("background-color: rgb(122, 122, 122);")
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.gridLayout = QtWidgets.QGridLayout()
        self.gridLayout.setObjectName("gridLayout")
        self.BlurButton_2 = QtWidgets.QPushButton(self.centralwidget)
        self.BlurButton_2.setStyleSheet("color: rgb(255, 255, 255);\n"
"font: 75 italic 8pt \"Arial\";\n"
"background-color: rgb(0, 170, 127);")
        self.BlurButton_2.setObjectName("BlurButton_2")
        self.gridLayout.addWidget(self.BlurButton_2, 0, 0, 1, 1)
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.verticalLayout.setObjectName("verticalLayout")
        self.rotateButton = QtWidgets.QPushButton(self.centralwidget)
        self.rotateButton.setStyleSheet("color: rgb(255, 255, 255);\n"
"font: 75 italic 8pt \"Arial\";\n"
"background-color: rgb(0, 170, 127);")
        self.rotateButton.setObjectName("rotateButton")
        self.verticalLayout.addWidget(self.rotateButton)
        self.resizeButton = QtWidgets.QPushButton(self.centralwidget)
        self.resizeButton.setStyleSheet("background-color: rgb(0, 170, 127);\n"
"font: 75 italic 8pt \"Arial\";\n"
"color: rgb(255, 255, 255);")
        self.resizeButton.setObjectName("resizeButton")
        self.verticalLayout.addWidget(self.resizeButton)
        self.cropButton = QtWidgets.QPushButton(self.centralwidget)
        self.cropButton.setStyleSheet("background-color: rgb(0, 170, 127);\n"
"font: 75 italic 8pt \"Arial\";\n"
"color: rgb(255, 255, 255);")
        self.cropButton.setObjectName("cropButton")
        self.verticalLayout.addWidget(self.cropButton)
        self.embossButton = QtWidgets.QPushButton(self.centralwidget)
        self.embossButton.setStyleSheet("background-color: rgb(0, 170, 127);\n"
"color: rgb(255, 255, 255);\n"
"font: 75 italic 8pt \"Arial\";")
        self.embossButton.setObjectName("embossButton")
        self.verticalLayout.addWidget(self.embossButton)
        self.flipButton = QtWidgets.QPushButton(self.centralwidget)
        self.flipButton.setStyleSheet("color: rgb(255, 255, 255);\n"
"background-color: rgb(0, 170, 127);\n"
"font: 75 italic 8pt \"Arial\";")
        self.flipButton.setObjectName("flipButton")
        self.verticalLayout.addWidget(self.flipButton)
        self.edgeButton = QtWidgets.QPushButton(self.centralwidget)
        self.edgeButton.setStyleSheet("color: rgb(255, 255, 255);\n"
"background-color: rgb(0, 170, 127);\n"
"font: 75 italic 8pt \"Arial\";")
        self.edgeButton.setObjectName("edgeButton")
        self.verticalLayout.addWidget(self.edgeButton)
        self.horizontalLayout.addLayout(self.verticalLayout)
        spacerItem = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout.addItem(spacerItem)
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setAutoFillBackground(False)
        self.label.setText("")
        self.label.setAlignment(QtCore.Qt.AlignCenter)
        self.label.setObjectName("label")
        self.horizontalLayout.addWidget(self.label)
        spacerItem1 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout.addItem(spacerItem1)
        self.verticalLayout_2 = QtWidgets.QVBoxLayout()
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.contrastLabel = QtWidgets.QLabel(self.centralwidget)
        self.contrastLabel.setStyleSheet("color: rgb(255, 255, 255);\n"
"font: 75 italic 8pt \"Arial\";")
        self.contrastLabel.setObjectName("contrastLabel")
        self.verticalLayout_2.addWidget(self.contrastLabel)
        self.contrastSlider = QtWidgets.QSlider(self.centralwidget)
        self.contrastSlider.setStyleSheet("\n"
"")
        self.contrastSlider.setOrientation(QtCore.Qt.Horizontal)
        self.contrastSlider.setObjectName("contrastSlider")
        self.verticalLayout_2.addWidget(self.contrastSlider)
        self.brightnessLabel = QtWidgets.QLabel(self.centralwidget)
        self.brightnessLabel.setStyleSheet("color: rgb(255, 255, 255);\n"
"font: 75 italic 8pt \"Arial\";")
        self.brightnessLabel.setObjectName("brightnessLabel")
        self.verticalLayout_2.addWidget(self.brightnessLabel)
        self.brightnessSlider_2 = QtWidgets.QSlider(self.centralwidget)
        self.brightnessSlider_2.setOrientation(QtCore.Qt.Horizontal)
        self.brightnessSlider_2.setObjectName("brightnessSlider_2")
        self.verticalLayout_2.addWidget(self.brightnessSlider_2)
        self.sharpnessLabel = QtWidgets.QLabel(self.centralwidget)
        self.sharpnessLabel.setStyleSheet("color: rgb(255, 255, 255);\n"
"font: 75 italic 8pt \"Arial\";")
        self.sharpnessLabel.setObjectName("sharpnessLabel")
        self.verticalLayout_2.addWidget(self.sharpnessLabel)
        self.sharpnessSlider_3 = QtWidgets.QSlider(self.centralwidget)
        self.sharpnessSlider_3.setOrientation(QtCore.Qt.Horizontal)
        self.sharpnessSlider_3.setObjectName("sharpnessSlider_3")
        self.verticalLayout_2.addWidget(self.sharpnessSlider_3)
        self.sharpnessLabel_2 = QtWidgets.QLabel(self.centralwidget)
        self.sharpnessLabel_2.setStyleSheet("color: rgb(255, 255, 255);\n"
"font: 75 italic 8pt \"Arial\";")
        self.sharpnessLabel_2.setObjectName("sharpnessLabel_2")
        self.verticalLayout_2.addWidget(self.sharpnessLabel_2)
        self.blurSlider = QtWidgets.QSlider(self.centralwidget)
        self.blurSlider.setOrientation(QtCore.Qt.Horizontal)
        self.blurSlider.setObjectName("blurSlider")
        self.verticalLayout_2.addWidget(self.blurSlider)
        self.horizontalLayout.addLayout(self.verticalLayout_2)
        self.gridLayout.addLayout(self.horizontalLayout, 1, 0, 1, 1)
        self.gridLayout_2.addLayout(self.gridLayout, 0, 0, 1, 1)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 617, 26))
        self.menubar.setObjectName("menubar")
        self.menuFile = QtWidgets.QMenu(self.menubar)
        self.menuFile.setObjectName("menuFile")
        MainWindow.setMenuBar(self.menubar)
        self.actionOpen_File = QtWidgets.QAction(MainWindow)
        self.actionOpen_File.setObjectName("actionOpen_File")
        self.actionSave_as = QtWidgets.QAction(MainWindow)
        self.actionSave_as.setObjectName("actionSave_as")
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.actionOpen_File)
        self.menuFile.addAction(self.actionSave_as)
        self.menubar.addAction(self.menuFile.menuAction())

        self.retranslateUi(MainWindow)
        self.edgeButton.clicked.connect(lambda:self.edgeEnhance())
        self.cropButton.clicked.connect(lambda:self.crop())
        self.BlurButton_2.clicked.connect(self.label.clear) # type: ignore
        self.resizeButton.clicked.connect(lambda:self.resize())
        self.embossButton.clicked.connect(lambda:self.emboss())
        self.flipButton.clicked.connect(lambda:self.flip())
        self.rotateButton.clicked.connect(lambda:self.rotate())
        self.actionSave_as.triggered.connect(lambda:self.saveAs()) 
        self.actionOpen_File.triggered.connect(lambda: self.pickAnImage())
        self.brightnessSlider_2.valueChanged['int'].connect(self.brightVal) # type: ignore
        self.blurSlider.valueChanged['int'].connect(self.blur_val) # type: ignore
        self.sharpnessSlider_3.valueChanged['int'].connect(self.sharp_val) # type: ignore
        self.contrastSlider.valueChanged['int'].connect(self.contr_val) # type: ignore
        
        QtCore.QMetaObject.connectSlotsByName(MainWindow)


        self.cur_bright_val = 0
        self.cur_sharp_val  = 0
        self.cur_contr_val = 0
        self.cur_blur_val = 0
        self.temporary = None
        self.image = None

    ##Define Functions##
    def pickAnImage(self):
        self.QFile = QFileDialog.getOpenFileName(filter="Image (*.*);;PNG Files (*.png);;JPG Files (*.jpg)")[0]
        self.image = cv2.imread(self.QFile)
        self.DisplayImage(self.image)

    def resize(self):
        self.image = cv2.resize(self.image,(800,600))
        self.image = cv2.cvtColor(self.image,cv2.COLOR_RGB2BGR)
        self.update()
        

    def DisplayImage(self,image):
        self.temporary = image
        image = imutils.resize(image,width=640)
        frame = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
        image = QImage(frame, frame.shape[1],frame.shape[0],frame.strides[0],QImage.Format_RGB888)
        self.label.setPixmap(QtGui.QPixmap.fromImage(image))

    def DisplayPILImage(self,image):
        self.temporary = image
        image = imutils.resize(image,width=640)
        frame = cv2.cvtColor(image,cv2.COLOR_RGB2BGR)
        image = QImage(frame, frame.shape[1],frame.shape[0],frame.strides[0],QImage.Format_RGB888)
        self.label.setPixmap(QtGui.QPixmap.fromImage(image))

    #Rotates the image 90 degrees
    def rotate(self):
        self.image = cv2.imread(self.QFile)
        height = self.image.shape[0]
        width = self.image.shape[1]
        self.image = cv2.rotate(self.image,cv2.ROTATE_90_CLOCKWISE)
        dim = (width,height)
        self.image = cv2.resize(self.image,dim)
        self.image = cv2.cvtColor(self.image,cv2.COLOR_RGB2BGR)
        self.update()

    def crop(self):
        height,width = self.image.shape[:2]
        self.image = self.image[30:height-30,30:width-30]
        self.image = cv2.cvtColor(self.image,cv2.COLOR_BGR2RGB)
        self.update()

    def flip(self):
        self.image = cv2.flip(self.image,1)
        self.image = cv2.cvtColor(self.image,cv2.COLOR_BGR2RGB)
        self.update()

        

    #Give the image an Emboss filter
    def emboss(self):
        self.image = Image.open(self.QFile)
        self.image = self.image.filter(ImageFilter.EMBOSS)
        self.image = np.asarray(self.image)
        self.update()
    
    def edgeEnhance(self):
        self.image = cv2.flip(self.image,0)
        self.update()

    #Get the brightness value from the slider
    def brightVal(self,value):
        self.cur_bright_val = value
        print('Brightness: ',value)
        self.updateBright()

    #Get the blur value from the slider
    def blur_val(self,value):
        self.cur_blur_val = value
        print('Blur: ',value)
        self.update()

    def sharp_val(self,value):
        self.cur_sharp_val = value
        print("Sharpness: ",value)
        self.updatePIL()

    def contr_val(self,value):
        self.cur_contr_val = value
        print("Contrast: ",value)
        self.updateContrast()

    def editBrightness(self,image,value):
        hsv = cv2.cvtColor(image,cv2.COLOR_BGR2HSV)
        h,s,v = cv2.split(hsv)
        lim = 255 - value
        v[v>lim] = 255
        v[v<=lim] += value
        final_hsv = cv2.merge((h,s,v))
        image = cv2.cvtColor(final_hsv,cv2.COLOR_HSV2BGR)
        return image

    def editBlur(self,image,value):
        kernel_size = (value+1,value+1)
        image = cv2.blur(image,kernel_size)
        return image

    def editSharp(self,image,value):
        self.cur_sharp_val = float(value)
        self.image = Image.open(self.QFile)
        self.image = ImageEnhance.Sharpness(self.image)
        self.image = self.image.enhance(value)
        self.image = np.asarray(self.image)
        
        return image

    def editContrast(self,image,value):
        self.cur_contr_val = float(value)
        self.image = Image.open(self.QFile)
        self.image = ImageEnhance.Contrast(self.image).enhance(self.cur_contr_val)
        self.image = np.asarray(self.image)
        return image

    def update(self):
        image = self.editBlur(self.image,self.cur_blur_val)
        image = cv2.cvtColor(image,cv2.COLOR_RGB2BGR)
        self.DisplayImage(image)

    def updateBright(self):
        image = self.editBrightness(self.image,self.cur_bright_val)
        #image = cv2.cvtColor(image,cv2.COLOR_BGR2RGB)
        self.DisplayImage(image)

    def updatePIL(self):
        image = self.editSharp(self.image,self.cur_sharp_val)
        #Converts the color into BGR mode
        image = cv2.cvtColor(image,cv2.COLOR_RGB2BGR)
        self.DisplayPILImage(image)

    def updateContrast(self):
        image = self.editContrast(self.image,self.cur_contr_val)
        image = cv2.cvtColor(image,cv2.COLOR_RGB2BGR)
        self.DisplayPILImage(image)
        
    def saveAs(self):
        QFile = QFileDialog.getSaveFileName(filter="JPG(*.jpg);;PNG(*.png);;TIFF(*.tiff);;BMP(*.bmp)")[0]
        cv2.imwrite(QFile,self.temporary)
    ####

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.BlurButton_2.setText(_translate("MainWindow", "Reset Image"))
        self.rotateButton.setText(_translate("MainWindow", "Rotate"))
        self.resizeButton.setText(_translate("MainWindow", "Resize"))
        self.cropButton.setText(_translate("MainWindow", "Crop"))
        self.embossButton.setText(_translate("MainWindow", "Emboss"))
        self.flipButton.setText(_translate("MainWindow", "Horizontal Flip"))
        self.edgeButton.setText(_translate("MainWindow", "Vertical Flip"))
        self.contrastLabel.setText(_translate("MainWindow", "Contrast"))
        self.brightnessLabel.setText(_translate("MainWindow", "Brightness"))
        self.sharpnessLabel.setText(_translate("MainWindow", "Sharpness"))
        self.sharpnessLabel_2.setText(_translate("MainWindow", "Blur"))
        self.menuFile.setTitle(_translate("MainWindow", "File"))
        self.actionOpen_File.setText(_translate("MainWindow", "Open File"))
        self.actionSave_as.setText(_translate("MainWindow", "Save as"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
